%package "wptool";
%class "Parser";

%terminals GLOBALVAR, LOCALVAR;
%terminals GLOBALARRAY, LOCALARRAY;

//%terminals RETURN, BREAK, CONTINUE;
%terminals IF, ELSE, WHILE, DO;

%terminals ID;
%terminals NUM;
%terminals LOW, HIGH, TRUE, FALSE;

%terminals LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
%terminals IMPLIES;
%terminals POSTFIX;
%terminals PREFIX,  BANG, TILDE;
%terminals STAR, DIV, MOD;
%terminals PLUS, MINUS;
%terminals SHL, SHR, ASHR;
%terminals LT, LE, GE, GT;
%terminals EQ, NEQ;
%terminals AMP;
%terminals CARET;
%terminals PIPE;
%terminals AND;
%terminals OR;
%terminals COLON;
%terminals ASG;
%terminals COMMA, SEMICOLON;
%terminals FORALL;
%terminals ASSERT;

%terminals CAS;
%terminals INVARIANT, GAMMA, GAMMA_0, RELY, GUAR;
%terminals LPRED;
%terminals MAPSTO;
%terminals PRIMEGAMMAID;
%terminals PRIMEID;
%terminals GAMMAID;

%nonassoc IF;
%nonassoc ELSE;
%nonassoc LPAREN, RPAREN;
%right PREFIX;
%left  STAR, DIV, MOD;
%left  PLUS, MINUS;
%left  SHL, SHR, ASHR;
%left  LT, LE, GE, GT;
%left  EQ, NEQ;
%left  AMP;
%left  CARET;
%left  PIPE;
%left  AND;
%left  OR;
%right COLON;
%right ASG;
%left  COMMA;

%typeof ID      = "String";
%typeof PRIMEID      = "String";
%typeof GAMMAID      = "String";
%typeof PRIMEGAMMAID      = "String";


%typeof NUM     = "Integer";

%typeof ptrdef    = "VarDef";

%typeof boolexpr    = "Expression";
%typeof intexpr    = "Expression";
%typeof ptrexpr    = "Expression";

%typeof local   = "Stmt";

%typeof block  = "Block";

%typeof definition = "Definition";
%typeof lpred = "Expression";
%typeof unit = "Global";
%typeof gamma_mapping = "GammaMapping";
%typeof rely = "Rely";
%typeof guar = "Guar";
%typeof arrrely = "Rely";
%typeof arrguar = "Guar";
%typeof security = "Security";

%goal unit;

unit = defs.v locals.s {: return new Global(v, s); :}
     | defs.v GAMMA_0 COLON gamma_mappings.f locals.s {: return new Global(v, f, s); :}
     | defs.v rely.r guar.g locals.s {: return new Global(v, r, g, s); :}
     | defs.v GAMMA_0 COLON gamma_mappings.f rely.r guar.g locals.s {: return new Global(v, f, r, g, s); :};


// TODO typing
ptrdef
	= STAR ID.n 				{: return new VarDef(n, GlobalVar.instance()); :}
	| STAR ptrdef.n			{: return new VarDef(n.name().name(), GlobalVar.instance()); :}
	;

vardef
    = GLOBALVAR ID.n COLON lpred.l              {:  return new VarDef(n, l, GlobalVar.instance()); :} // TODO: does this make them appear as global (i.e. are vars without right permissions global)
    | GLOBALVAR ID.n COLON                     	{: return new VarDef(n, GlobalVar.instance()); :}
    | LOCALVAR ID.n COLON                     	{: return new VarDef(n, LocalVar.instance()); :}
    | ptrdef.n COLON					  		{: return new VarDef(n.name().name(), GlobalVar.instance()); :} // TODO
    | ptrdef.n COLON lpred.l			  		{: return new VarDef(n.name().name(), l, GlobalVar.instance()); :} // TODO
    ;

definition
	= vardef
    | GLOBALARRAY ID.n LBRACK intexpr.s RBRACK COLON lpred.l arrrely.r arrguar.g {: return new ArrayDef(n, s, l, GlobalVar.instance(), r, g); :}
    | GLOBALARRAY ID.n LBRACK intexpr.s RBRACK COLON arrrely.r arrguar.g {: return new ArrayDef(n, s, GlobalVar.instance(), r, g); :}
    | LOCALARRAY ID.n LBRACK intexpr.s RBRACK COLON lpred.l arrrely.r arrguar.g {: return new ArrayDef(n, s, l, LocalVar.instance(), r, g); :}
    | LOCALARRAY ID.n LBRACK intexpr.s RBRACK COLON arrrely.r arrguar.g {: return new ArrayDef(n, s, LocalVar.instance(), r, g); :}
	;

arrrely = RELY COLON boolexpr.a {: return  new Rely(a); :};
arrguar = GUAR COLON boolexpr.a {: return new Guar(a); :};

defs = definition *;

block = LBRACE locals.ss RBRACE {: return new Block("unprocessed", ss); :};

local
    = ID.n ASG    intexpr.b SEMICOLON              {: return new Assignment(n, b); :}     // TODO boolexpr
    | ID.n ASG    ptrexpr.b SEMICOLON              {: return new Assignment(n, b); :}
    | ID.n LBRACK intexpr.i RBRACK ASG    intexpr.b SEMICOLON        {: return new ArrayAssignment(n, i, b); :}
	| STAR ID.n ASG intexpr.b SEMICOLON				{: return new Assignment(new Dereference(n), b); :}
    | IF LPAREN boolexpr.a RPAREN block.b   {: return new If(a, b);  :}
    | IF LPAREN boolexpr.a RPAREN block.b ELSE block.c     {: return new If(a, b, c);   :}
    | WHILE LPAREN boolexpr.a RPAREN INVARIANT COLON boolexpr.i block.b      {: return new While(a, i, b);   :}
    | WHILE LPAREN boolexpr.a RPAREN block.b      {: return new While(a, b);   :}
    | WHILE LPAREN boolexpr.a RPAREN INVARIANT COLON boolexpr.i GAMMA COLON gamma_mappings.g block.b      {: return new While(a, i, g, b);   :}
    | DO INVARIANT COLON boolexpr.i block.b WHILE LPAREN boolexpr.a RPAREN    {: return new DoWhile(a, i, b);   :}
    | ASSERT boolexpr.e SEMICOLON {: return new Assert(e);   :}
    | error SEMICOLON {: return Malformed.self(); :}
    ;

locals  = local *;

boolexpr
    = PRIMEGAMMAID.n                              {: return new Id(n, TBool.instance(), true, true, false);  :}
	| GAMMAID.n                        {: return new Id(n, TBool.instance(), false, true, false);  :}
    // | PRIMEID.n                              {: return new Id(n, TBool.instance(), true, false, false);  :}
    // TODO | ID.n                              {: return new Id(n, TBool.instance(), false, false, false);  :}
    // | PRIMEID.n LBRACK intexpr.i RBRACK       {: return new IdAccess(n, true, false, i); :}
    | GAMMAID.n LBRACK intexpr.i RBRACK       {: return new IdAccess(n, false, true, i); :}
    | PRIMEGAMMAID.n LBRACK intexpr.i RBRACK       {: return new IdAccess(n, true, true, i); :}
    // | ID.n LBRACK intexpr.i RBRACK       {: return new IdAccess(n, i); :}
	// | CAS LPAREN ID.x COMMA intexpr.y COMMA intexpr.z RPAREN {: return new CompareAndSwap(x, y, z); :}
    | BANG  boolexpr.a @ PREFIX             {: return new PreOp("!", TBool.instance(), TBool.instance(), a);    :}
    | boolexpr.a IMPLIES   boolexpr.b           {: return new BinOp("=>", TBool.instance(), TBool.instance(), a, b); :}
    | boolexpr.a EQ     boolexpr.b              {: return new BinOp("==", TBool.instance(), TBool.instance(),a, b); :} // TODO this is incorrect
    | boolexpr.a NEQ    boolexpr.b              {: return new BinOp("!=", TBool.instance(), TBool.instance(),a, b); :}
    | boolexpr.a AND    boolexpr.b              {: return new BinOp("&&", TBool.instance(), TBool.instance(),a, b); :}
    | boolexpr.a OR     boolexpr.b              {: return new BinOp("||", TBool.instance(), TBool.instance(),a, b); :}
    | intexpr.a LT     intexpr.b              {: return new BinOp("<", TInt.instance(), TBool.instance(), a, b); :}
    | intexpr.a LE     intexpr.b              {: return new BinOp("<=",TInt.instance(), TBool.instance(),a, b); :}
    | intexpr.a GE     intexpr.b              {: return new BinOp(">=",TInt.instance(), TBool.instance(),a, b); :}
    | intexpr.a GT     intexpr.b              {: return new BinOp(">", TInt.instance(), TBool.instance(), a, b); :}
    | intexpr.a EQ     intexpr.b              {: return new BinOp("==", TInt.instance(), TBool.instance(),a, b); :}
    | intexpr.a NEQ    intexpr.b              {: return new BinOp("!=", TInt.instance(), TBool.instance(),a, b); :}
	// | FORALL LPAREN exprl.l COLON boolexpr.e RPAREN        {: return new ForAll(l, e); :}
    | LPAREN boolexpr.e RPAREN              {: return (Symbol) e;           :}
    | TRUE                              {: return new Const("True");  :}
    | FALSE                             {: return new Const("False");  :}
    ;

intexpr
    = PREFIX | POSTFIX /* unused */
    | PRIMEID.n                              {: return new Id(n, TInt.instance(), true, false, false);  :}
    | ID.n                              {: return new Id(n, TInt.instance(), false, false, false);  :}
    | PRIMEID.n LBRACK intexpr.i RBRACK       {: return new IdAccess(n, true, false, i); :}
    | ID.n LBRACK intexpr.i RBRACK       {: return new IdAccess(n, i); :}
	// TODO rm
	| CAS LPAREN ID.x COMMA intexpr.y COMMA intexpr.z RPAREN {: return new CompareAndSwap(x, y, z); :}
    | NUM.n                             {: return new Lit(n); :}
    | PLUS  intexpr.a @ PREFIX             {: return new PreOp("+", TInt.instance(), TInt.instance(), a);    :}
    | MINUS intexpr.a @ PREFIX             {: return new PreOp("-", TInt.instance(), TInt.instance(), a);    :}
    | intexpr.a STAR   intexpr.b              {: return new BinOp("*", TInt.instance(), TInt.instance(), a, b); :}
    | intexpr.a DIV    intexpr.b              {: return new BinOp("/", TInt.instance(), TInt.instance(), a, b); :}
    | intexpr.a PLUS   intexpr.b              {: return new BinOp("+", TInt.instance(), TInt.instance(), a, b); :}
    | intexpr.a MINUS  intexpr.b              {: return new BinOp("-", TInt.instance(), TInt.instance(), a, b); :}
    | intexpr.a MOD    intexpr.b              {: return new BinOp("%", TInt.instance(), TInt.instance(),a, b); :}
    | LPAREN intexpr.e RPAREN              {: return (Symbol) e;           :}
    ;

ptrexpr
	// TODO = ID.n									{: return new Id(n, new TPointer(TInt.instance()), false, false, false) :}
	= AMP ID.n                              {: return new Reference(n);  :}
	| STAR ID.n                              {: return new Dereference(n);  :}
	;

// for _L(x): pred construction to set predicate for variable security level
lpred = LPRED COLON boolexpr.a {: return (Symbol) a; :};


rely = RELY COLON boolexpr.a {: return  new Rely(a); :};
guar = GUAR COLON boolexpr.a {: return new Guar(a); :};


gamma_mappings
    = gamma_mapping | gamma_mappings COMMA gamma_mapping;

gamma_mapping
    = ID.n MAPSTO security.s {: return new GammaMapping(n, s); :}
    | ID.n LBRACK NUM.i RBRACK MAPSTO security.s {: return new GammaMapping(n, i, s); :}
    | ID.n LBRACK STAR RBRACK MAPSTO security.s {: return new GammaMapping(n, s); :}
    ;

security
    = LOW {: return Low.instance(); :}
    | HIGH {: return High.instance(); :}
    ;
