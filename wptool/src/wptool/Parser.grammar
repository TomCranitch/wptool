%package "wptool";
%class "Parser";

%terminals GLOBALVAR;
%terminals LOCALVAR;
//%terminals ARRAY;

//%terminals RETURN, BREAK, CONTINUE;
%terminals IF, ELSE, WHILE, DO;

%terminals ID;
%terminals NUM;
%terminals LOW, HIGH, TRUE, FALSE;

%terminals LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
%terminals IMPLIES;
%terminals POSTFIX;
%terminals PREFIX,  BANG, TILDE;
%terminals STAR, DIV, MOD;
%terminals PLUS, MINUS;
%terminals SHL, SHR, ASHR;
%terminals LT, LE, GE, GT;
%terminals EQ, NEQ;
%terminals AMP;
%terminals CARET;
%terminals PIPE;
%terminals AND;
%terminals OR;
%terminals COLON;
%terminals ASG;
%terminals COMMA, SEMICOLON;

%terminals CAS;
%terminals FENCE, CFENCE;
%terminals INVARIANT, GAMMA, GAMMA_0, STABLE, RELY, GUAR;
%terminals LPRED;
%terminals MAPSTO;
%terminals PRIMEID;
%terminals GAMMAID;

%nonassoc IF;
%nonassoc ELSE;
%nonassoc LPAREN, RPAREN;
%right PREFIX;
%left  STAR, DIV, MOD;
%left  PLUS, MINUS;
%left  SHL, SHR, ASHR;
%left  LT, LE, GE, GT;
%left  EQ, NEQ;
%left  AMP;
%left  CARET;
%left  PIPE;
%left  AND;
%left  OR;
%right COLON;
%right ASG;
%left  COMMA;

%typeof ID      = "String";
%typeof PRIMEID      = "String";
%typeof GAMMAID      = "String";

%typeof NUM     = "Integer";

%typeof stable = "Id";

%typeof expr    = "Expression";

%typeof local   = "Statement";
%typeof local1  = "Statement";
%typeof local2  = "Statement";

%typeof block  = "Block";

%typeof definition = "Definition";
%typeof lpred = "Expression";
%typeof unit = "Global";
%typeof gamma_mapping = "GammaMapping";
%typeof rely = "Rely";
%typeof guar = "Guar";
%typeof security = "Security";
//%typeof lpredindex = "Expression";

%goal unit;

unit = defs.v locals.s {: return new Global(v, s); :}
     | defs.v GAMMA_0 COLON gamma_mappings.f locals.s {: return new Global(v, f, s); :}
     | defs.v rely.r guar.g locals.s {: return new Global(v, r, g, s); :}
     | defs.v GAMMA_0 COLON gamma_mappings.f rely.r guar.g locals.s {: return new Global(v, f, r, g, s); :};


local
    = SEMICOLON {: return Block.empty(); :}
    | local1
    ;

local2
	=  local1
    ;

locals  = local *;
locals2 = local2 *;

stable = ID.i {: return new Id(i); :}
         | ID.i LBRACK STAR RBRACK {: return new Id(i); :}
         | ID.i LBRACK NUM.n RBRACK {: return new Id(i + "[" + n + "]"); :}
         ;

stables = stable | stables COMMA stable;

definition
    =     GLOBALVAR ID.n COLON lpred.l              {:  return new VarDef(n, l, GlobalVar.instance()); :} // TODO: does this make them appear as global (i.e. are vars without right permissions global)
          | GLOBALVAR ID.n COLON                     {: return new VarDef(n, GlobalVar.instance()); :}
          | LOCALVAR ID.n COLON lpred.l              {:  return new VarDef(n, l, LocalVar.instance()); :}
          | LOCALVAR ID.n COLON                     {: return new VarDef(n, LocalVar.instance()); :}
          //| ARRAY ID.n LBRACK NUM.s RBRACK COLON lpred.l mode.m {: return new ArrayDef(n, s, l, m); :}
          //| ARRAY ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l mode.m {: return new ArrayDef(n, s, l, m); :}
          //| ARRAY ID.n LBRACK NUM.s RBRACK COLON mode.m {: return new ArrayDef(n, s, m); :}
          ;

defs = definition *;

block = LBRACE locals2.ss RBRACE {: return new Block(ss); :};

local1
    =
    //LBRACE locals2.ss RBRACE          {: return new Block(ss); :}
    //| expr.a   SEMICOLON                {: return new Atomic(a); :}
    //|
    ID.n ASG    expr.b SEMICOLON              {: return new Assignment(n, b); :}
    | ID.n ASG CAS LPAREN ID.x COMMA expr.y COMMA expr.z RPAREN SEMICOLON {: return new CompareAndSwap(n, x, y, z); :}
    | ID.n LBRACK expr.i RBRACK ASG    expr.b SEMICOLON        {: return new ArrayAssignment(n, i, b); :}
    //| RETURN   SEMICOLON                {: return Return.none(); :}
    //| RETURN expr.a SEMICOLON           {: return new Return(a); :}
    //| BREAK    SEMICOLON                {: return Break.self();  :}
    //| CONTINUE SEMICOLON                {: return Continue.self(); :}
    | FENCE SEMICOLON                   {: return Fence.self();  :}
    | CFENCE SEMICOLON                   {: return ControlFence.self();  :}
    | IF LPAREN expr.a RPAREN block.b   {: return new If(a, b);  :}
    | IF LPAREN expr.a RPAREN block.b ELSE block.c     {: return new If(a, b, c);   :}
    | WHILE LPAREN expr.a RPAREN INVARIANT COLON expr.i GAMMA COLON gamma_mappings.g block.b      {: return new While(a, i, g, b);   :}
    | WHILE LPAREN expr.a RPAREN INVARIANT COLON expr.i GAMMA COLON gamma_mappings.g STABLE COLON stables.n block.b      {: return new While(a, i, g, n, b);   :}
    | DO INVARIANT COLON expr.i GAMMA COLON gamma_mappings.g local.b WHILE LPAREN expr.a RPAREN    {: return new DoWhile(a, i, g, b);   :}
    | DO INVARIANT COLON expr.i GAMMA COLON gamma_mappings.g STABLE COLON stables.n local.b WHILE LPAREN expr.a RPAREN     {: return new DoWhile(a, i, g, n, b);   :}
    | error SEMICOLON {: return Malformed.self(); :}
    ;

expr
    = PREFIX | POSTFIX /* unused */
	| GAMMAID.n                        {: return new GammaId(new Id(n));  :}
    | ID.n                              {: return new Id(n);  :}
    | PRIMEID.n                              {: return new Id(n);  :}
    // | ID.n LBRACK expr.i RBRACK       {: return new Access(n, i); :}
    | NUM.n                             {: return new Lit(n); :}
    | PLUS  expr.a @ PREFIX             {: return new PreOp("+", a);    :}
    | MINUS expr.a @ PREFIX             {: return new PreOp("-", a);    :}
    | BANG  expr.a @ PREFIX             {: return new PreOp("!", a);    :}
    | TILDE expr.a @ PREFIX             {: return new PreOp("~", a);    :}
    | expr.a IMPLIES   expr.b           {: return new BinOp("=>", a, b); :}
    | expr.a STAR   expr.b              {: return new BinOp("*", a, b); :}
    | expr.a DIV    expr.b              {: return new BinOp("/", a, b); :}
    | expr.a MOD    expr.b              {: return new BinOp("%", a, b); :}
    | expr.a PLUS   expr.b              {: return new BinOp("+", a, b); :}
    | expr.a MINUS  expr.b              {: return new BinOp("-", a, b); :}
    | expr.a SHL    expr.b              {: return new BinOp("<<",a, b); :}
    | expr.a SHR    expr.b              {: return new BinOp(">>",a, b); :}
    | expr.a ASHR    expr.b             {: return new BinOp(">>>",a, b); :}
    | expr.a LT     expr.b              {: return new BinOp("<", a, b); :}
    | expr.a LE     expr.b              {: return new BinOp("<=",a, b); :}
    | expr.a GE     expr.b              {: return new BinOp(">=",a, b); :}
    | expr.a GT     expr.b              {: return new BinOp(">", a, b); :}
    | expr.a EQ     expr.b              {: return new BinOp("==",a, b); :}
    | expr.a NEQ    expr.b              {: return new BinOp("!=",a, b); :}
    | expr.a AMP    expr.b              {: return new BinOp("&", a, b); :}
    | expr.a CARET  expr.b              {: return new BinOp("^", a, b); :}
    | expr.a PIPE   expr.b              {: return new BinOp("|", a, b); :}
    | expr.a AND    expr.b              {: return new BinOp("&&",a, b); :}
    | expr.a OR     expr.b              {: return new BinOp("||",a, b); :}
    | LPAREN expr.e RPAREN              {: return (Symbol) e;           :}
    | TRUE                              {: return new Const("True");  :}
    | FALSE                             {: return new Const("False");  :}
    ;

// for _L(x): pred construction to set predicate for variable security level
lpred = LPRED COLON expr.a {: return (Symbol) a; :};


rely = RELY COLON expr.a {: return  new Rely(a); :};
guar = GUAR COLON expr.a {: return new Guar(a); :};


//lpredindex = LPRED LBRACK NUM.n RBRACK COLON expr.a {: return (Symbol) a; :};

//lpredindexes = lpredindex | lpredindexes lpredindex;


gamma_mappings
    = gamma_mapping | gamma_mappings COMMA gamma_mapping;

gamma_mapping
    = ID.n MAPSTO security.s {: return new GammaMapping(n, s); :}
    | ID.n LBRACK NUM.i RBRACK MAPSTO security.s {: return new GammaMapping(n, i, s); :}
    | ID.n LBRACK STAR RBRACK MAPSTO security.s {: return new GammaMapping(n, s); :}
    ;

security
    = LOW {: return Low.instance(); :}
    | HIGH {: return High.instance(); :}
    ;
