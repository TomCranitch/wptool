package wptool;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short PLUS = 1;
		static public final short MINUS = 2;
		static public final short ID = 3;
		static public final short REG_ID = 4;
		static public final short LPAREN = 5;
		static public final short NUM = 6;
		static public final short PREFIX = 7;
		static public final short POSTFIX = 8;
		static public final short BANG = 9;
		static public final short TILDE = 10;
		static public final short TRUE = 11;
		static public final short FALSE = 12;
		static public final short STAR = 13;
		static public final short DIV = 14;
		static public final short MOD = 15;
		static public final short SHL = 16;
		static public final short SHR = 17;
		static public final short ASHR = 18;
		static public final short LT = 19;
		static public final short LE = 20;
		static public final short GE = 21;
		static public final short GT = 22;
		static public final short EQ = 23;
		static public final short NEQ = 24;
		static public final short AMP = 25;
		static public final short CARET = 26;
		static public final short COLON = 27;
		static public final short PIPE = 28;
		static public final short AND = 29;
		static public final short SEMICOLON = 30;
		static public final short OR = 31;
		static public final short WHILE = 32;
		static public final short DO = 33;
		static public final short COMMA = 34;
		static public final short IF = 35;
		static public final short FENCE = 36;
		static public final short CFENCE = 37;
		static public final short RBRACK = 38;
		static public final short LBRACK = 39;
		static public final short RPAREN = 40;
		static public final short LPRED = 41;
		static public final short MODE = 42;
		static public final short RBRACE = 43;
		static public final short MAPSTO = 44;
		static public final short LOW = 45;
		static public final short HIGH = 46;
		static public final short INVARIANT = 47;
		static public final short GAMMA = 48;
		static public final short STABLE = 49;
		static public final short ASG = 50;
		static public final short ARRAY = 51;
		static public final short GAMMA_0 = 52;
		static public final short VAR = 53;
		static public final short LBRACE = 54;
		static public final short CAS = 55;
		static public final short P_0 = 56;
		static public final short ELSE = 57;
		static public final short NORW = 58;
		static public final short NOW = 59;
		static public final short RW = 60;

		static public final String[] NAMES = {
			"EOF",
			"PLUS",
			"MINUS",
			"ID",
			"REG_ID",
			"LPAREN",
			"NUM",
			"PREFIX",
			"POSTFIX",
			"BANG",
			"TILDE",
			"TRUE",
			"FALSE",
			"STAR",
			"DIV",
			"MOD",
			"SHL",
			"SHR",
			"ASHR",
			"LT",
			"LE",
			"GE",
			"GT",
			"EQ",
			"NEQ",
			"AMP",
			"CARET",
			"COLON",
			"PIPE",
			"AND",
			"SEMICOLON",
			"OR",
			"WHILE",
			"DO",
			"COMMA",
			"IF",
			"FENCE",
			"CFENCE",
			"RBRACK",
			"LBRACK",
			"RPAREN",
			"LPRED",
			"MODE",
			"RBRACE",
			"MAPSTO",
			"LOW",
			"HIGH",
			"INVARIANT",
			"GAMMA",
			"STABLE",
			"ASG",
			"ARRAY",
			"GAMMA_0",
			"VAR",
			"LBRACE",
			"CAS",
			"P_0",
			"ELSE",
			"NORW",
			"NOW",
			"RW"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjM0kK5CKLlJFJlVn1H40PTXPNt5rO28e8AWmh2xYVMLZ05JTga6X8OeH4Gmn4aqXKagX" +
		"9Y2PHKC4FAWY28eg2#4D5496FV0H1yHCK218JHECdbLlLRtghXztUvHmyXtYSSsxVgbTrwz" +
		"MhxgvwFO1RZYueH0kqH5Er7yVYE8FvoC89E17vw8uUE1cdu5JqmUdeYoIAC017OI068nSbH" +
		"dqCNaKsdiAlSIicupACnOz3rOkqMYbHcvxgtnWAr$SVflwhyTrAr3UZ6RBLVutlynhW#yz6" +
		"tLpK5s4Nefpzavpz4inJT#2FeUhMHhrQr3bOZWJceYDBtpEb6qBLHnjr6r5ppRdYRV53A#8" +
		"mTJkZlbJKxHdrlqpKZINgYb3rAAE#q9$vQ3FVMrWQRqepGjLZZFeINztKQEx7EFo6pyhr#4" +
		"a3rhnfJTpKJ4SAn#CUpCFbk2zKFI6W$XdNR3wUC6is1ozZ5Lu9LLzXr1D4dOsV1zOiXSwXw" +
		"ia1todaeGb#ONpdu7Vu5TSWJFrByvplzNrVRNp$oVTT4Ag#nlZ#lgWtC#uKkXhVhwCJozr2" +
		"rJSPjJVhRz7tjSRtxnlmXZXKQjqZnbSA9n4zYLxuGwZEyzMRlluIYBDkZLQyZxUfEequW#Y" +
		"7l#63EXN3CCBCgHgLA4CvgZ0Iv#E2msPFeJzn9b6CxtpbteuqktV$1X5d4QN4469uhNSZV8" +
		"opYNE8SublrxcV7sdnVsF$UjYrpNiElykJvos$le4xZVqSJi4cgQTmCNUjgO6J8Hjt1kfwX" +
		"6cuaNr$8AF$27TWPc14kwpxt2Kxw4#9Xx3CNEq#klKwRELPSfivJnSOrRs88MvyTn3ViqIL" +
		"e$QPCsUsQNrGMdEmq5Eh3zMNU1YDg9wCgwY#acqJPMJj#t4ynhRRQUrW#NiKYsbDOHAjAVp" +
		"MUb$JsPWNnTt23nX#0K#p$3oUmmgimJlOGTv2fF2c#W9ByGnRdcNCBzBs4bPY7TPYFLx3Hh" +
		"o1zx2TrgtOoPDi6u1tyNTulntckWKHPcNTUMubMOlnH8gPKscGoHrQCVjipLog3VFEjioAs" +
		"flvT636sf5tBS7ejBe5zva4TvfEp39o6KzdHXIcxcNKyDMw9tZUntt$zVlEzzNTw1l6Tq43" +
		"V2UDkaBKkTnpHt3sLPpzIAvdDVVXC7MUKHUBEibyeOXds02M2gGKfkuMyAtNN4UTPqLSlpg" +
		"zvXL#rEaLpmzLkqQTz6UUUqWpJnXrJr#T54s2Qlsi91gmvaahRgr9CWCeu9gxzQnvxu1wAA" +
		"FMQhrc1SnZ#ZAF2LEVRjIzHPsWtbupFOSmTMx6glMdxqBZEybSJQz1cBhIg0jzt#uX#UuHU" +
		"CwB6RTMQD#bl1FrgVEDEZth1DyjxJlUmBTJwqwJEFlxY8VgQdpbDN0dq8eIHcFxoEDPKvT2" +
		"zzTpSha7DE9fqOHV2ytuVNcuxFOy#dpbtev4kxq2QTHsDmvbZBhsyoCn$c$i$$zsRQjv3el" +
		"zkjvfxESmvUyqtgxL8x1h9LYpwtg4EFD8tJSzkgxR8zfbtSSDxA3nWzuctLhEdJh9gtUUUb" +
		"u6ywjG#ouJtvtyUHQQVjuval3FaRYe2tb6L1frBhyBo$XTcEHtOVgSxoyZdyHocUMlt5XrU" +
		"rd6#vhEnj9Hs9mkTq5NKzQieMrWLXLdhOJNE6t5l6OnJftX5REKPQpvl9OYJodTeimFNRmh" +
		"HzWzYHTMzW6H3Ips8xgQ31NCXe6BYC6Jl4os5$jjrEKq#3k6k8oudfWYjcd4R8xNBAFlTfr" +
		"J16qHzejMwTbuzUXeuR724uLlvEKKygtaHUIPW7Cv#I7oY#GdoL#INo9VGdwDV3FvBV9KyX" +
		"xo7F8d38snnOuZJYJwqiQOOoNa4yXdavkGB#JSzf8l9Q#rOdYAjWdaH8qjTgsmn1#xNNYMy" +
		"4ATKsIinOUqTpVV1OWzGxw0l8fy5R5VT9jvkGtwMm8n0ejbpT9hvmWpXXZl7xyy4Eb0z2Rw" +
		"UMtEN9R7IR$9h2#nrlvXwZvdWMiIcKvGxpGYZoMt8LSHRm2ko$eOqNp6UbFoBUJcOdk1bn5" +
		"SjvZSg#DhV3Zd45SIESGAuXhgMfB74TeFxx$3zodIJlhFO$lH78C#d0K4dqcd3zjFbVQdW#" +
		"iO6M$vMauCP47FToUnbSLsx5DDxYBhFjHZzrZYA4Bcx39Ufv9z#SouVAQT0#GiQMjFUsVRh" +
		"zZvPU2s87WVNNvPkN7gzFgqblbyOVLjI$Ga#DovUYtEvvWBfDyqwSDxv$8PTpiIkKIss3lL" +
		"ZAE$PPphqdM#DlfvdobhKMNtovolrJOsepwbbZwZQx6fcd9aW72ryDN2KuLd22yKNY#yGNY" +
		"Jy2wFeuwmh7cqiN2fSBbmXV1AuLN2gm#URtHDHdsTy1xXlSBxX3$A74FYblVEwI4yADZkd6" +
		"ULHzKsXjK#Nk9k8YpFfJCrs2yoAaEtFAD#XV1AQvvwVnrZrS#0sQ#SayFcb37kH4lFVG7Bh" +
		"BPDmRxOJsopshSUWfz5#lssukLxwYorshTazDzfbNTOSpYNzNqDzMkDmNVM#LXytnJIRtVz" +
		"OqK#bRu7P4wx#QfiGU2dxZ7NkzKCDTsttILyf$g7scDA7wl$g4$5kf5ubk3fe7WIAzv9jPJ" +
		"WIQUM48k99uZ72QwcUenubE1fenuXk7igxl2A9wIQhrQg5NglO7cvudcfk6Uhvubbn7F6Fa" +
		"yzgEOYuwSsM6MUgMeziSwth2NMcD8cS$sd#kIW4JuJVjMtx5Ix3UyYFb2hCnNIwvMCEaz7z" +
		"R9wNyrKdwkFr863#czMholk#EezmlptfkP8oxlcUh#wJzshtibGlKtiKBCiomEAEOEQBRLj" +
		"n9jgk#8vY8jHpJokckUBXyRCwI94p6Hu6fN4MGPHPdaW8ipw8imIDQBC5454#DH6cC5vI1a" +
		"u1aDO7iBnXhCydFs7quzNRYnePC555VjNiTz8ZZkIvH74KEgBg2bYbbx4VaLiz#1ANTjR4i" +
		"s9LgPDvzerS8IZ6OWTPdZ#IbWkPQuwZELXvX#Oc8z1jEd$e0OQP1bKqAPnvly0k33PLm==");

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] unit = defs.v locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, s);
				}
			},
			new Action() {	// [1] unit = defs.v GAMMA_0 COLON gamma_mappings.f locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_f = _symbols[offset + 4];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, f, s);
				}
			},
			new Action() {	// [2] unit = defs.v P_0 COLON exprs.e locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Expression[] e = _list_e == null ? new Expression[0] : (Expression[]) _list_e.toArray(new Expression[_list_e.size()]);
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, e, s);
				}
			},
			new Action() {	// [3] unit = defs.v P_0 COLON exprs.e GAMMA_0 COLON gamma_mappings.f locals.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ArrayList _list_v = (ArrayList) _symbol_v.value;
					final Definition[] v = _list_v == null ? new Definition[0] : (Definition[]) _list_v.toArray(new Definition[_list_v.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final ArrayList _list_e = (ArrayList) _symbol_e.value;
					final Expression[] e = _list_e == null ? new Expression[0] : (Expression[]) _list_e.toArray(new Expression[_list_e.size()]);
					final Symbol _symbol_f = _symbols[offset + 7];
					final ArrayList _list_f = (ArrayList) _symbol_f.value;
					final GammaMapping[] f = _list_f == null ? new GammaMapping[0] : (GammaMapping[]) _list_f.toArray(new GammaMapping[_list_f.size()]);
					final Symbol _symbol_s = _symbols[offset + 8];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final Statement[] s = _list_s == null ? new Statement[0] : (Statement[]) _list_s.toArray(new Statement[_list_s.size()]);
					 return new Global(v, e, f, s);
				}
			},
			new Action() {	// [4] exprs = expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [5] exprs = exprs COMMA expr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [6] local = SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Block.empty();
				}
			},
			Action.RETURN,	// [7] local = local1
			Action.RETURN,	// [8] local2 = local1
			new Action() {	// [9] lst$local = local
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [10] lst$local = lst$local local
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [11] opt$lst$local = 
			Action.RETURN,	// [12] opt$lst$local = lst$local
			Action.RETURN,	// [13] locals = opt$lst$local
			new Action() {	// [14] lst$local2 = local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [15] lst$local2 = lst$local2 local2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [16] opt$lst$local2 = 
			Action.RETURN,	// [17] opt$lst$local2 = lst$local2
			Action.RETURN,	// [18] locals2 = opt$lst$local2
			new Action() {	// [19] id_reg_id = ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [20] id_reg_id = REG_ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					 return new Id(n);
				}
			},
			new Action() {	// [21] stable = id_reg_id.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final Id i = (Id) _symbol_i.value;
					 return i;
				}
			},
			new Action() {	// [22] stable = id_reg_id.i LBRACK STAR RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final Id i = (Id) _symbol_i.value;
					 return i;
				}
			},
			new Action() {	// [23] stable = id_reg_id.i LBRACK NUM.n RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final Id i = (Id) _symbol_i.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					 return new Id(i.name() + "[" + n + "]");
				}
			},
			new Action() {	// [24] stables = stable
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [25] stables = stables COMMA stable
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [26] definition = VAR REG_ID.n COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					 return new VarDef(n, l);
				}
			},
			new Action() {	// [27] definition = VAR REG_ID.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					 return new VarDef(n);
				}
			},
			new Action() {	// [28] definition = VAR ID.n COLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 5];
					final Mode m = (Mode) _symbol_m.value;
					  return new VarDef(n, l, m);
				}
			},
			new Action() {	// [29] definition = VAR ID.n COLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_m = _symbols[offset + 4];
					final Mode m = (Mode) _symbol_m.value;
					 return new VarDef(n, m);
				}
			},
			new Action() {	// [30] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON lpred.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final Expression l = (Expression) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 8];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, l, m);
				}
			},
			new Action() {	// [31] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final Expression[] l = _list_l == null ? new Expression[0] : (Expression[]) _list_l.toArray(new Expression[_list_l.size()]);
					final Symbol _symbol_m = _symbols[offset + 8];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, l, m);
				}
			},
			new Action() {	// [32] definition = ARRAY ID.n LBRACK NUM.s RBRACK COLON mode.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_m = _symbols[offset + 7];
					final Mode m = (Mode) _symbol_m.value;
					 return new ArrayDef(n, s, m);
				}
			},
			new Action() {	// [33] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK COLON lpred.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final Expression l = (Expression) _symbol_l.value;
					 return new ArrayDef(n, s, l);
				}
			},
			new Action() {	// [34] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK COLON lpredindexes.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final Expression[] l = _list_l == null ? new Expression[0] : (Expression[]) _list_l.toArray(new Expression[_list_l.size()]);
					 return new ArrayDef(n, s, l);
				}
			},
			new Action() {	// [35] definition = ARRAY REG_ID.n LBRACK NUM.s RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Integer s = (Integer) _symbol_s.value;
					 return new ArrayDef(n, s);
				}
			},
			new Action() {	// [36] lst$definition = definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [37] lst$definition = lst$definition definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [38] opt$lst$definition = 
			Action.RETURN,	// [39] opt$lst$definition = lst$definition
			Action.RETURN,	// [40] defs = opt$lst$definition
			new Action() {	// [41] block = LBRACE locals2.ss RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_ss = _symbols[offset + 2];
					final ArrayList _list_ss = (ArrayList) _symbol_ss.value;
					final Statement[] ss = _list_ss == null ? new Statement[0] : (Statement[]) _list_ss.toArray(new Statement[_list_ss.size()]);
					 return new Block(ss);
				}
			},
			new Action() {	// [42] local1 = id_reg_id.n ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new Assignment(n, b);
				}
			},
			new Action() {	// [43] local1 = id_reg_id.n ASG CAS LPAREN id_reg_id.x COMMA expr.y COMMA expr.z RPAREN SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_x = _symbols[offset + 5];
					final Id x = (Id) _symbol_x.value;
					final Symbol _symbol_y = _symbols[offset + 7];
					final Expression y = (Expression) _symbol_y.value;
					final Symbol _symbol_z = _symbols[offset + 9];
					final Expression z = (Expression) _symbol_z.value;
					 return new CompareAndSwap(n, x, y, z);
				}
			},
			new Action() {	// [44] local1 = id_reg_id.n LBRACK expr.i RBRACK ASG expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expression i = (Expression) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final Expression b = (Expression) _symbol_b.value;
					 return new ArrayAssignment(n, i, b);
				}
			},
			new Action() {	// [45] local1 = FENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Fence.self();
				}
			},
			new Action() {	// [46] local1 = CFENCE SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return ControlFence.self();
				}
			},
			new Action() {	// [47] local1 = IF LPAREN expr.a RPAREN block.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new If(a, b);
				}
			},
			new Action() {	// [48] local1 = IF LPAREN expr.a RPAREN block.b ELSE block.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final Block c = (Block) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [49] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, b);
				}
			},
			new Action() {	// [50] local1 = WHILE LPAREN expr.a RPAREN INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g STABLE COLON stables.n local.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_i = _symbols[offset + 7];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 10];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_n = _symbols[offset + 13];
					final ArrayList _list_n = (ArrayList) _symbol_n.value;
					final Id[] n = _list_n == null ? new Id[0] : (Id[]) _list_n.toArray(new Id[_list_n.size()]);
					final Symbol _symbol_b = _symbols[offset + 14];
					final Statement b = (Statement) _symbol_b.value;
					 return new While(a, i, g, n, b);
				}
			},
			new Action() {	// [51] local1 = DO INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g local.b WHILE LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_b = _symbols[offset + 8];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 11];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(a, i, g, b);
				}
			},
			new Action() {	// [52] local1 = DO INVARIANT COLON exprs.i GAMMA COLON gamma_mappings.g STABLE COLON stables.n local.b WHILE LPAREN expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final Expression[] i = _list_i == null ? new Expression[0] : (Expression[]) _list_i.toArray(new Expression[_list_i.size()]);
					final Symbol _symbol_g = _symbols[offset + 7];
					final ArrayList _list_g = (ArrayList) _symbol_g.value;
					final GammaMapping[] g = _list_g == null ? new GammaMapping[0] : (GammaMapping[]) _list_g.toArray(new GammaMapping[_list_g.size()]);
					final Symbol _symbol_n = _symbols[offset + 10];
					final ArrayList _list_n = (ArrayList) _symbol_n.value;
					final Id[] n = _list_n == null ? new Id[0] : (Id[]) _list_n.toArray(new Id[_list_n.size()]);
					final Symbol _symbol_b = _symbols[offset + 11];
					final Statement b = (Statement) _symbol_b.value;
					final Symbol _symbol_a = _symbols[offset + 14];
					final Expression a = (Expression) _symbol_a.value;
					 return new DoWhile(a, i, g, n, b);
				}
			},
			new Action() {	// [53] local1 = error SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Malformed.self();
				}
			},
			Action.RETURN,	// [54] expr = PREFIX
			Action.RETURN,	// [55] expr = POSTFIX
			new Action() {	// [56] expr = id_reg_id.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					 return n;
				}
			},
			new Action() {	// [57] expr = id_reg_id.n LBRACK expr.i RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expression i = (Expression) _symbol_i.value;
					 return new Access(n, i);
				}
			},
			new Action() {	// [58] expr = NUM.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Lit(n);
				}
			},
			new Action() {	// [59] expr = PLUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("+", a);
				}
			},
			new Action() {	// [60] expr = MINUS expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("-", a);
				}
			},
			new Action() {	// [61] expr = BANG expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("!", a);
				}
			},
			new Action() {	// [62] expr = TILDE expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expression a = (Expression) _symbol_a.value;
					 return new PreOp("~", a);
				}
			},
			new Action() {	// [63] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("*", a, b);
				}
			},
			new Action() {	// [64] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("/", a, b);
				}
			},
			new Action() {	// [65] expr = expr.a MOD expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("%", a, b);
				}
			},
			new Action() {	// [66] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("+", a, b);
				}
			},
			new Action() {	// [67] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("-", a, b);
				}
			},
			new Action() {	// [68] expr = expr.a SHL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<<",a, b);
				}
			},
			new Action() {	// [69] expr = expr.a SHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>",a, b);
				}
			},
			new Action() {	// [70] expr = expr.a ASHR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">>>",a, b);
				}
			},
			new Action() {	// [71] expr = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<", a, b);
				}
			},
			new Action() {	// [72] expr = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("<=",a, b);
				}
			},
			new Action() {	// [73] expr = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">=",a, b);
				}
			},
			new Action() {	// [74] expr = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp(">", a, b);
				}
			},
			new Action() {	// [75] expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("==",a, b);
				}
			},
			new Action() {	// [76] expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("!=",a, b);
				}
			},
			new Action() {	// [77] expr = expr.a AMP expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&", a, b);
				}
			},
			new Action() {	// [78] expr = expr.a CARET expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("^", a, b);
				}
			},
			new Action() {	// [79] expr = expr.a PIPE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("|", a, b);
				}
			},
			new Action() {	// [80] expr = expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("&&",a, b);
				}
			},
			new Action() {	// [81] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expression a = (Expression) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expression b = (Expression) _symbol_b.value;
					 return new BinOp("||",a, b);
				}
			},
			new Action() {	// [82] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return (Symbol) e;
				}
			},
			new Action() {	// [83] expr = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("True");
				}
			},
			new Action() {	// [84] expr = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Const("False");
				}
			},
			new Action() {	// [85] lpred = LPRED COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [86] lpredindex = LPRED LBRACK NUM.n RBRACK COLON expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					final Symbol _symbol_a = _symbols[offset + 6];
					final Expression a = (Expression) _symbol_a.value;
					 return (Symbol) a;
				}
			},
			new Action() {	// [87] lpredindexes = lpredindex
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [88] lpredindexes = lpredindexes lpredindex
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [89] mode = MODE COLON NORW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return NoRW.instance();
				}
			},
			new Action() {	// [90] mode = MODE COLON NOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return NoW.instance();
				}
			},
			new Action() {	// [91] mode = MODE COLON RW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return RW.instance();
				}
			},
			new Action() {	// [92] gamma_mappings = gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [93] gamma_mappings = gamma_mappings COMMA gamma_mapping
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [94] gamma_mapping = id_reg_id.n MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [95] gamma_mapping = id_reg_id.n LBRACK NUM.i RBRACK MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final Integer i = (Integer) _symbol_i.value;
					final Symbol _symbol_s = _symbols[offset + 6];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, i, s);
				}
			},
			new Action() {	// [96] gamma_mapping = id_reg_id.n LBRACK STAR RBRACK MAPSTO security.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Id n = (Id) _symbol_n.value;
					final Symbol _symbol_s = _symbols[offset + 6];
					final Security s = (Security) _symbol_s.value;
					 return new GammaMapping(n, s);
				}
			},
			new Action() {	// [97] security = LOW
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Low.instance();
				}
			},
			new Action() {	// [98] security = HIGH
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return High.instance();
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
